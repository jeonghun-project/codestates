(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{485:function(t,e,s){"use strict";s.r(e);var a=s(1),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"redis-zsets"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis-zsets"}},[t._v("#")]),t._v(" Redis - ZSets")]),t._v(" "),e("blockquote",[e("p",[t._v("Redis는 오픈소스 in-memory data store 입니다.")])]),t._v(" "),e("p",[t._v("일반적으로 Cache, streaming engine, Message Broker에 사용이 됩니다.")]),t._v(" "),e("p",[e("strong",[t._v("현재 글에서는 Redis에서 지원하는 우선순위가 있는 데이터 저장법에 대하여 알아보도록 할 예정입니다.")])]),t._v(" "),e("h2",{attrs:{id:"zsets"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#zsets"}},[t._v("#")]),t._v(" ZSets")]),t._v(" "),e("p",[t._v("ZSets 는 Score를 통해 우선순위를 정할 수 있는 데이터 타입이다. "),e("strong",[t._v("Sorted Set")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("ZADD는 "),e("code",[t._v("Key, Score, Value")]),t._v("로 구성된다.")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("ZADD KEY_NAME SCORE1 VALUE1.. SCOREN VALUEN")])])]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[t._v("res "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" redisDB"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ZAdd")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Z"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Score"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Member"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("이렇게 보관된 Data를 Score를 따라 우선순위를 정해서 리턴 할 수 있다.")])]),t._v(" "),e("li",[e("p",[t._v("ZRANGE")]),t._v(" "),e("ul",[e("li",[t._v("Score가 작은 것 부터 Value를 조회한다.")])]),t._v(" "),e("p",[e("code",[t._v("zrange key start stop")]),t._v(" => 전체 조회를 위해서는 "),e("code",[t._v("start")]),t._v(" = 0 "),e("code",[t._v("stop")]),t._v(" = -1을 줄 수 있다.")]),t._v(" "),e("p",[e("code",[t._v("withscores")]),t._v(" 옵션을 사용하면 스코어 정보도 함께 조회할 수 있다.")])]),t._v(" "),e("li",[e("p",[t._v("ZREM")]),t._v(" "),e("ul",[e("li",[t._v("멤버 삭제")])])]),t._v(" "),e("li",[e("p",[t._v("ZRangeByScore")]),t._v(" "),e("ul",[e("li",[t._v("Score 범위를 지정해서 조회 할 수 있다")])]),t._v(" "),e("p",[e("code",[t._v("zrangebyscore key min max")]),t._v(" => 전체 조회를 위햐서는 "),e("code",[t._v("min")]),t._v(" = -inf "),e("code",[t._v("max")]),t._v(" = +inf로 조회하면 된다.")])]),t._v(" "),e("li",[e("p",[t._v("ZScore")]),t._v(" "),e("ul",[e("li",[t._v("Value의 Score를 개별 조회 한다.")])])])]),t._v(" "),e("p",[t._v("이외에도 다양한 "),e("code",[t._v("ZSets")]),t._v("의 사용법이 있으니 확인해보길 바란다.")]),t._v(" "),e("p",[e("a",{attrs:{href:"http://redisgate.kr/redis/command/zsets.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("ZSets"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);