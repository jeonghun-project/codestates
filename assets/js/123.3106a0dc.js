(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{575:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"node-js-내장-서버"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-js-내장-서버"}},[t._v("#")]),t._v(" Node js 내장 서버")]),t._v(" "),s("p",[t._v("Node.js의 경우 내장된 웹서버를 지원한다.\nNode.js 공식 Documents에 자세한 내용이 나와있어 공부를 위해 다시 읽으면 옮겨보았다.\n자세한 내용과 본문을 그대로 옮겨둔 내 글보다는 원글을 천천히 이해해 보는것을 추천한다.")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://nodejs.org/ko/docs/guides/anatomy-of-an-http-transaction/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP 트랜젝션 해부"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("code",[t._v("EventEmitters")]),t._v("와 "),s("code",[t._v("Stream")]),t._v("에 대한 이해가 필요하다는데 일단은 이해가 없는 상태에서 만들수는 있었다. 몇 가지 API 만 그때 그때 참고하면서 만들어 보았다.")]),t._v(" "),s("p",[t._v("다시 정리하면서 필요한 부분만 따로 정리하여 post로 만들었으니 참고")]),t._v(" "),s("h2",{attrs:{id:"서버-생성"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#서버-생성"}},[t._v("#")]),t._v(" 서버 생성")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" http "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" server "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" response")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 여기서 작업이 진행됩니다!")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("우선 서버를 만드는 것은 굉장히 간단한데, HTTP 통신이 올때마나 "),s("code",[t._v("Server")]),t._v("라는 객체를 만들어 통신에 이용하는 것이다.")]),t._v(" "),s("p",[t._v("여기서 만들어진 "),s("code",[t._v("Server")]),t._v(" 객체는 "),s("code",[t._v("EventEmitter")]),t._v("이고, 여기에 "),s("code",[t._v("Listener")]),t._v("를 함께 추가해준다. -- 이를 축약한 것이 "),s("code",[t._v("createServer")]),t._v("이다.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" server "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'request'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" response")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 여기서 작업이 진행됩니다!")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//서버가 사용하고자하는 포트를 server객체에 전달한다. 80 : http")]),t._v("\n")])])]),s("h2",{attrs:{id:"request-vs-response"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#request-vs-response"}},[t._v("#")]),t._v(" request vs response")]),t._v(" "),s("p",[t._v("HTTP 요청이 들어오면 Node가 트랜잭션을 다루기 위한 "),s("code",[t._v("request")]),t._v(" 객체와 "),s("code",[t._v("response")]),t._v(" 객체를 전달하고. 요청을 다루기위한 핸들러 함수를 호출한다.")]),t._v(" "),s("p",[s("code",[t._v("Node.js")]),t._v("에서 제공하는 문서를 살펴보면 "),s("code",[t._v("request")]),t._v(" 객체는 "),s("code",[t._v("ReadableStream interface")]),t._v("를 구현하고 "),s("code",[t._v("response")]),t._v(" 객체는 "),s("code",[t._v("ServerResponse interface")]),t._v("를 구현하며 이는 "),s("code",[t._v("WritableStream")]),t._v("이다.\n"),s("code",[t._v("Stream")]),t._v("이 무엇인지 잠시 알아보면,")]),t._v(" "),s("p",[s("strong",[s("a",{attrs:{href:"https://jeonghun-project.github.io/Learning-things/nodeJS/Stream.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Stream에 대한 정리보기"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("해당 문서를 간략하게 읽어보면\n"),s("code",[t._v("Stream")]),t._v("은 추상인터페이스 이면서 "),s("code",[t._v("data")]),t._v("를 다루기 위한 인터페이스이고\n"),s("code",[t._v("request")]),t._v("는 이중에서 데이터를 읽을 수 있는 "),s("code",[t._v("Stream")]),t._v("인 것이다.")]),t._v(" "),s("p",[t._v("그러면 "),s("code",[t._v("request")]),t._v("를 통하여 우리는 "),s("code",[t._v("data")]),t._v("를 읽을 수 있는 것인데")]),t._v(" "),s("p",[t._v("자세하게 "),s("code",[t._v("request")]),t._v("에 대하여 알아보자.")]),t._v(" "),s("h2",{attrs:{id:"request"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#request"}},[t._v("#")]),t._v(" request")]),t._v(" "),s("p",[s("code",[t._v("request")]),t._v(" 객체 내부에는 유용한 property가 이미 포함되어 있고, 이를 적절히 사용할 수 있다.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" headers "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" userAgent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'user-agent'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// header 정보는 무조건 소문자로 들어온다.")]),t._v("\n")])])]),s("p",[t._v("헤더를 반복해서 설정하면 덮어씌워지거나 콤막로 구분된 문자열로 합쳐집니다.\n이를 방지하기 위해서는 "),s("code",[t._v("rawHeaders")]),t._v("를 사용할 수도 있다.")]),t._v(" "),s("h4",{attrs:{id:"request-body"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#request-body"}},[t._v("#")]),t._v(" request body")]),t._v(" "),s("p",[s("code",[t._v("ReadableStream interface")]),t._v("로 구현된 "),s("code",[t._v("request")]),t._v(" 객체인 "),s("code",[t._v("Stream")]),t._v("에는 "),s("code",[t._v("EventListner")]),t._v("를 등록하거나 다른 "),s("code",[t._v("Stream")]),t._v("에 "),s("code",[t._v("pipe")]),t._v("로 연결할 수 있다.")]),t._v(" "),s("p",[s("code",[t._v("data")]),t._v("와 "),s("code",[t._v("end")]),t._v(" "),s("code",[t._v("event")]),t._v("에 "),s("code",[t._v("eventListner")]),t._v("를 등록하여 데이터를 받을 수 있다.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" body "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nrequest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("chunk")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chunk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'end'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  body "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 여기서 `body`에 전체 요청 바디가 문자열로 담겨있습니다.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("'data'")]),t._v(" 이벤트에서 발생하는 chun는 Buffer입니다.\n이 데이터를 배열에 수잡한 다음 "),s("code",[t._v("'end'")]),t._v("이벤트에서 이어 붙인 다음 문자열로 만드는 것이 문자열을 다루는 일반 적인 방법이다.")]),t._v(" "),s("h4",{attrs:{id:"error-handling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#error-handling"}},[t._v("#")]),t._v(" Error handling")]),t._v(" "),s("p",[s("code",[t._v("request")]),t._v(" 객체가 "),s("code",[t._v("ReadableStream")]),t._v("인 "),s("code",[t._v("EventEmitter")]),t._v("이기에 Error가 발생하였을 때 "),s("code",[t._v("EventEmitter")]),t._v("처럼 동작합니다.")]),t._v(" "),s("p",[s("strong",[s("a",{attrs:{href:"https://jeonghun-project.github.io/Learning-things/nodeJS/EventEmitter.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("EventEmitter에 대한 정리보기"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("오류가 발생하면 Stream에서 "),s("code",[t._v("'error'")]),t._v("이벤트가 발생하면서 오류를 전달합니다.")]),t._v(" "),s("p",[s("strong",[t._v("이벤트에 리스너가 등록되어 있지 않다면 Node.js 프로그램을 종료시킬 수도 있는 오류를 던질 것이다.")]),t._v("\n그러므로 단순히 오류를 로깅만하더라도 Stream에 "),s("code",[t._v("'error'")]),t._v("리슨너를 추가해야 합니다.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 여기서 `stderr`에 오류 메시지와 스택 트레이스를 출력합니다.")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"response"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#response"}},[t._v("#")]),t._v(" response")]),t._v(" "),s("p",[t._v("HTTP 상태 코드 "),s("code",[t._v("statusCode")]),t._v(" 프로퍼티를 설정하여 상태 코드를 변경할 수 있고, 따로 설정이 없을 때는 "),s("code",[t._v("200")]),t._v("인 상태이다.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("statusCode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("404")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 클라이언트에게 리소스를 찾을 수 없다고 알려줍니다.")]),t._v("\n")])])]),s("p",[t._v("응답 헤어 설정 메소드 "),s("code",[t._v("setHeader")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/json'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'X-Powered-By'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bacon'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("응답 헤더를 설정할 때 헤어 이름의 대소문자는 중요하지 않다. 헤더를 여러 번 설정한다면 마지막에 설정한 값을 보낸다.")]),t._v(" "),s("p",[t._v("response.text에는 dody data의 문자열이 담겨온다.")]),t._v(" "),s("h3",{attrs:{id:"명시적인-헤더-데이터-전송"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#명시적인-헤더-데이터-전송"}},[t._v("#")]),t._v(" 명시적인 헤더 데이터 전송")]),t._v(" "),s("p",[t._v('"암묵적인 헤더" body data를 보내기 전 적절한 순간에 헤더를 보내는 일을 노드에 의존하고 있다.\n"명시적 헤더" '),s("code",[t._v("writeHead")]),t._v("를 이용하여 header에 상태 코드와 내용을 작성할 수 있다.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeHead")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'Content-Type'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/json'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'X-Powered-By'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bacon'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("일단 헤더를 어떻게든 작성해야 데이터를 전송할 준비가 된 것이다.")]),t._v(" "),s("h3",{attrs:{id:"response-body"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#response-body"}},[t._v("#")]),t._v(" response body")]),t._v(" "),s("p",[s("code",[t._v("response")]),t._v(" 객체는 "),s("code",[t._v("WritableStream")]),t._v(" 이다.\n"),s("code",[t._v("Stream")]),t._v(" method를 사용해서 작성하면 된다.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<html>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<body>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<h1>Hello, World!</h1>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'</body>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'</html>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Stream의 "),s("code",[t._v("end")]),t._v(" method에 보낼 데이터의 마지막 비트를 선택적으로 전달할 수 있다.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<html><body><h1>Hello, World!</h1></body></html>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("주의 : 바디에 데이터 청크를 작성하기 전에 상태 코드와 헤더를 설정해야 합니다. HTTP 응답에서 바디 전에 헤더가 존재해야 하기 때문에")])]),t._v(" "),s("ul",[s("li",[t._v("요청 핸들러 함수로 HTTP 서버의 인스턴스를 생성하고 특정 포트로 서버를 열 수 있습니다.")]),t._v(" "),s("li",[t._v("request 객체에서 헤더, URL, 메서드, 바디 데이터를 가져올 수 있습니다.")]),t._v(" "),s("li",[t._v("URL이나 request 객체의 데이터에 기반을 둬서 라우팅을 할 수 있습니다.")]),t._v(" "),s("li",[t._v("response 객체로 헤더, HTTP 상태 코드, 바디 데이터를 보낼 수 있습니다.")]),t._v(" "),s("li",[t._v("request 객체에서 response 객체로 데이터를 파이프로 연결할 수 있습니다.")]),t._v(" "),s("li",[t._v("request와 response 스트림 모두에서 스트림 오류를 처리할 수 있습니다.")])]),t._v(" "),s("p",[t._v("위 문서는 Node.js 트랜잭션 해부 문서의 내용을 그대로 가져왔다.\n공부를 위한 개인적인 옮기기이니 아래를 참고하는 것이 바람직하다.")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://nodejs.org/ko/docs/guides/anatomy-of-an-http-transaction/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js 트랜잭션 해부"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);