(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{576:function(t,a,e){"use strict";e.r(a);var s=e(1),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stream"}},[t._v("#")]),t._v(" Stream")]),t._v(" "),a("p",[t._v("공식문서에서 살펴보면")]),t._v(" "),a("blockquote",[a("p",[t._v("A stream is an abstract interface for working with streaming data in Node.js")])]),t._v(" "),a("p",[a("code",[t._v("Stream")]),t._v("은 추상 인터페이스 이고, 이는 Streaming data를 작업을 위한 인터페이스 라고한다.")]),t._v(" "),a("p",[t._v("Node.js에는 많은 스트림 객체가 있는데 예를 들면 "),a("code",[t._v("request")]),t._v(" to an HTTP server and "),a("code",[t._v("process.stdout")]),t._v(" 등이 있다고 한다.")]),t._v(" "),a("p",[t._v("Stream은 읽기 혹은 쓰기 혹은 둘 다 가능하고, "),a("strong",[t._v("모든 Stream은 EventEmitter의 인스턴스이다.")])]),t._v(" "),a("h3",{attrs:{id:"type-of-stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-of-stream"}},[t._v("#")]),t._v(" type of stream")]),t._v(" "),a("p",[t._v("Stream의 기본적인 유형")]),t._v(" "),a("ul",[a("li",[t._v("Writable : data를 쓸 수 있는 Stream")]),t._v(" "),a("li",[t._v("Readable : data를 읽을 수 있는 Stream")]),t._v(" "),a("li",[t._v("Duplex : 읽기 및 쓰기가 가능한 Stream")]),t._v(" "),a("li",[t._v("Transform : 데이터를 쓰고 읽을때 수정이나 변환할 수 있는 이중 Stream")])]),t._v(" "),a("h3",{attrs:{id:"object-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-mode"}},[t._v("#")]),t._v(" Object mode")]),t._v(" "),a("p",[t._v("Node.js API로 생성 된 모든 "),a("code",[t._v("Stream")]),t._v("은 "),a("code",[t._v("String")]),t._v(" and "),a("code",[t._v("Buffer")]),t._v("(ro Unit8Array) 객체에서만 작동한다. steam instance들은 생성시에 objectMode 옵션을 통해 object mode 로 변경 된다.")]),t._v(" "),a("h2",{attrs:{id:"buffering"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#buffering"}},[t._v("#")]),t._v(" Buffering")]),t._v(" "),a("p",[t._v("stream의 "),a("code",[t._v("Writable")]),t._v(" and "),a("code",[t._v("Readable")]),t._v(" 은 모두 내부 버퍼에 데이터를 저장한다.")]),t._v(" "),a("p",[t._v("구현할 때에 "),a("code",[t._v("stream.push(chunk)")]),t._v("를 호출하면 데이터가 ReadableStream에 buffering 되고, 이를 Read하지 않으면 data는 지속적으로 queue에 존재하게 된다.")]),t._v(" "),a("p",[t._v("Stream API 특히, "),a("code",[t._v("pipe")]),t._v(" method, 핵심 목적은 데이터 buffering을 허용 가능한 수준으로 제한하고, 속도가 다른 소스와 대상이 사용 가능한 메모리를 압도하지 않도록 하는 것이다.")]),t._v(" "),a("p",[t._v("이를 위해 Stream은 "),a("code",[t._v("highWaterMark")]),t._v(" option으로 임계값을 지정할 수 있다.")]),t._v(" "),a("h2",{attrs:{id:"highwatermark"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#highwatermark"}},[t._v("#")]),t._v(" HighWaterMark")]),t._v(" "),a("p",[a("code",[t._v("Steam")]),t._v("들을 생성할때 전달되는 "),a("strong",[a("code",[t._v("HighWaterMark")])]),t._v(" option을 통해 buffer되는 data의 양(bytes)을 정할 수 있다.")]),t._v(" "),a("p",[t._v("일반적인 "),a("code",[t._v("Stream")]),t._v("의 경우 바이트의 수(메모리)를 지정하도록 되어 있다.("),a("u",[t._v("비 객체 모드")]),t._v(")\n객체 모드으 경우에는 청 겍체의 수로 지정된다.")]),t._v(" "),a("p",[t._v("하지만, 이는 한계가 아니라 임계값이고, "),a("code",[t._v("Stream")]),t._v("이 "),a("strong",[t._v("더 많은 데이터 요청을 중지하기 전에 버퍼링 하는 데이터 양을 지정")]),t._v("한다. 엄격하게 메모리를 제한하지는 않지만 특정한 "),a("code",[t._v("Stream")]),t._v("은 더 엄격한 메모리 제한을 하도록 선택할 수 있다.")]),t._v(" "),a("h2",{attrs:{id:"consumers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consumers"}},[t._v("#")]),t._v(" Consumers")]),t._v(" "),a("p",[t._v("이러한 "),a("strong",[a("code",[t._v("Stream")])]),t._v(" 들을 실질적 이용에 대한 설명이다.")]),t._v(" "),a("p",[t._v("우리는 "),a("code",[t._v("server")]),t._v("를 객체를 만들어 server객체에 "),a("code",[t._v("Stream")]),t._v("으로 다듬어진 "),a("code",[t._v("request")]),t._v(" 객체와 "),a("code",[t._v("response")]),t._v(" 객체를 볼 수 있다.")]),t._v(" "),a("p",[t._v("결국 "),a("code",[t._v("Stream")]),t._v("은 "),a("strong",[t._v("Streaming")]),t._v("된 "),a("code",[t._v("Buffer")]),t._v(" data에 대한 처리를 하는 instance인데")]),t._v(" "),a("p",[t._v("이를 읽어 내리는 Stream\n써 내리는 Stream이 있는 것이다.")]),t._v(" "),a("p",[t._v("각각은 "),a("a",{attrs:{href:"https://nodejs.org/api/stream.html#stream_highwatermark_discrepancy_after_calling_readable_setencoding",target:"_blank",rel:"noopener noreferrer"}},[t._v("공식문서"),a("OutboundLink")],1),t._v("를 통해 Writable API와 Readable API를 확인할 수 있으니 자세하게 알아보면 좋겠다.")]),t._v(" "),a("h2",{attrs:{id:"writable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writable"}},[t._v("#")]),t._v(" Writable")]),t._v(" "),a("h3",{attrs:{id:"event"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Event")])]),t._v(" "),a("ul",[a("li",[t._v("close")]),t._v(" "),a("li",[t._v("drain")]),t._v(" "),a("li",[t._v("error")]),t._v(" "),a("li",[t._v("finish")]),t._v(" "),a("li",[t._v("pipe")]),t._v(" "),a("li",[t._v("unpipe")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("h4",{attrs:{id:"close"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#close"}},[t._v("#")]),t._v(" "),a("code",[t._v("'close'")])]),t._v(" "),a("p",[t._v("writableStream 을 말 그대로 닫는다. 더이상 write할 수가 없는 상태가 된다. 더 이상 이벤트가 발생하지 않고 계산이 이루어지지 않는다.")]),t._v(" "),a("h4",{attrs:{id:"drain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#drain"}},[t._v("#")]),t._v(" "),a("code",[t._v("'drain'")])]),t._v(" "),a("p",[t._v("write() method에서 false가 리턴되는 경우 즉, highWaterMark 보다 큰 데이터의 요청이 들어올 때\n청크가 버퍼링되며 현재 버퍼링된 모든 청크가 빠져나가면 drain 이벤트를 발생시키면 메모리 에러를 방지할 수 있다.")]),t._v(" "),a("p",[t._v("write()가 false를 리턴 하면 write()를 호출하지 않는 것이 좋다.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeOneMillionTimes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("writer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" encoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ok "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Last time!")]),t._v("\n        writer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" encoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// See if we should continue, or wait.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Don't pass the callback, because we're not done yet.")]),t._v("\n        ok "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" writer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" encoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ok"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Had to stop early!")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Write some more once it drains.")]),t._v("\n      writer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("once")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'drain'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"error"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#error"}},[t._v("#")]),t._v(" "),a("code",[t._v("'error'")])]),t._v(" "),a("p",[t._v("데이터 쓰기 또는 piping 중 오류가 발생하면 "),a("code",[t._v("'error'")]),t._v("이벤트가 발생한다. 리스너 콜백은 호출 될 때 단일 Error인수를 전달합니다.")]),t._v(" "),a("p",[t._v("일반적으로는 "),a("code",[t._v("'error'")]),t._v(" 이벤트가 발생하면 스트림이 닫힌다.")]),t._v(" "),a("p",[a("code",[t._v("'error'")]),t._v("이벤트 이후에는 "),a("code",[t._v("'close'")]),t._v("이벤트 외에는 생성되지 않아야한다.")]),t._v(" "),a("h4",{attrs:{id:"finish"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finish"}},[t._v("#")]),t._v(" "),a("code",[t._v("'finish'")])]),t._v(" "),a("p",[a("code",[t._v("end()")]),t._v("가 호출되고 모든 데이터가 기본 상태로 돌아가면 "),a("code",[t._v("'finish'")]),t._v("이벤트가 실행된다.")]),t._v(" "),a("h4",{attrs:{id:"pipe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pipe"}},[t._v("#")]),t._v(" "),a("code",[t._v("'pipe'")])]),t._v(" "),a("p",[a("code",[t._v("pipe()")]),t._v("가 호출되면 "),a("code",[t._v("'pipe'")]),t._v(" event가 실행됩니다.")]),t._v(" "),a("p",[a("code",[t._v("unpipe")]),t._v("의 경우에는 반대입니다.")]),t._v(" "),a("h3",{attrs:{id:"writable-stream-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writable-stream-method"}},[t._v("#")]),t._v(" writable Stream: method")]),t._v(" "),a("p",[t._v("너무 많으니 중요한 것만 살펴보자.")]),t._v(" "),a("ul",[a("li",[t._v("destroy()")]),t._v(" "),a("li",[t._v("end()")]),t._v(" "),a("li",[t._v("write()")])]),t._v(" "),a("h4",{attrs:{id:"destroy-error"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#destroy-error"}},[t._v("#")]),t._v(" "),a("code",[t._v("destroy([error])")])]),t._v(" "),a("p",[a("code",[t._v("Stream")]),t._v("을 파괴합니다. 선택적으로 "),a("code",[t._v("'error'")]),t._v("이벤트를 생성하고 "),a("code",[t._v("'close'")]),t._v("이벤트를 생성합니다.\n"),a("code",[t._v("destroy")]),t._v("된 Stream은 종료되고 이후에 호출되는 "),a("code",[t._v("write()")]),t._v(" or "),a("code",[t._v("end()")]),t._v("은 "),a("strong",[t._v("ERR_STREAM_DESTROYED")]),t._v(" 오류를 발생시킵니다.")]),t._v(" "),a("p",[a("code",[t._v("'drain'")]),t._v("event가 없는 경우에는 이전에 호출(previous call)된 "),a("code",[t._v("write()")]),t._v("또한 "),a("strong",[t._v("ERR_STREAM_DESTROYE")]),t._v("오류를 트리거 한다고 한다.")]),t._v(" "),a("p",[t._v("결론, "),a("code",[t._v("destroy()")]),t._v(" 되기 전에 데이터가 정상적으로 write되기를 바라는 경우 "),a("code",[t._v("destroy()")]),t._v(" 대신에 "),a("code",[t._v("end()")]),t._v("를 사용하거나 "),a("code",[t._v("'drain'")]),t._v("event를 만들어 두면 된다.")]),t._v(" "),a("h4",{attrs:{id:"end-chunk-encoding-callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#end-chunk-encoding-callback"}},[t._v("#")]),t._v(" end([chunk[, encoding]][,callback])")]),t._v(" "),a("p",[t._v("writable.end () 메서드를 호출하면 더 이상 데이터가 Writable에 기록되지 않는다는 신호를 보냅니다.\n선택적 청크 및 인코딩 인수를 사용하면 스트림을 닫기 직전에 하나의 최종 추가 데이터 청크를 쓸 수 있습니다.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Write 'hello, ' and then end with 'world!'.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createWriteStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'example.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello, '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Writing more now is not allowed!")]),t._v("\n")])])]),a("h4",{attrs:{id:"write-chunk-encoding-callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#write-chunk-encoding-callback"}},[t._v("#")]),t._v(" "),a("code",[t._v("write(chunk[, encoding][, callback])")])]),t._v(" "),a("p",[t._v("----- 아직 작성중")]),t._v(" "),a("h3",{attrs:{id:"readable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readable"}},[t._v("#")]),t._v(" Readable")]),t._v(" "),a("p",[t._v("이와는 별개로 "),a("code",[t._v("EventEmiter")]),t._v("에 명시되어 있는 method들 또한 "),a("code",[t._v("Stream")]),t._v(" 객체이면서 "),a("code",[t._v("EventEmiter")]),t._v("인 "),a("code",[t._v("request")]),t._v("에 대한 이해에 있어 필수적이다.")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://jeonghun-project.github.io/Learning-things/nodeJS/EventEmitter.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("EventEmiter"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);